{"version":3,"sources":["components/Header.js","components/Footer.js","components/Scroll.js","components/PhotoCard.js","containers/App.js","serviceWorker.js","index.js"],"names":["Header","className","role","aria-label","Footer","id","href","Scroll","props","style","overflowY","border","height","children","PhotoCard","srcPath","farm","server","secret","alt","src","App","useState","pictures","setPictures","isLoaded","setIsLoaded","error","setError","inputText","setInputText","wordsToSearch","setWordsToSearch","useEffect","fetch","method","then","response","json","data","photos","photo","message","onChange","event","text","target","value","type","placeholder","onKeyDown","keyCode","onClick","map","pic","index","key","number","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"6PAiBeA,MAbf,WACI,OACI,yBAAKC,UAAU,2BACX,wBAAIA,UAAU,qBACd,0BAAMC,KAAK,MAAMC,aAAW,UAA5B,gBADA,iBAC4D,0BAAMA,aAAW,eAAeD,KAAK,OAArC,iBAC5D,uBAAGD,UAAU,UAAb,4CCcGG,MAnBf,WACI,OACI,4BAAQH,UAAU,SAASI,GAAG,kBAE9B,yBAAKJ,UAAU,SAEX,uBAAGK,KAAK,oCAAmC,uBAAGL,UAAU,gCAExD,uBAAGK,KAAK,+CAA8C,uBAAGL,UAAU,iCAEnE,uBAAGK,KAAK,oCAAmC,uBAAGL,UAAU,+BAE1D,4DCLKM,EARA,SAACC,GACd,OACE,yBAAKP,UAAU,eAAcQ,MAAQ,CAACC,UAAW,SAAUC,OAAQ,oBAAqBC,OAAQ,UAC7FJ,EAAMK,WCSEC,EAXG,SAACN,GAEjB,IAAMO,EAAS,eAAgBP,EAAMQ,KAAO,qBAAsBR,EAAMS,OAAS,IAAKT,EAAMH,GAAI,IAAKG,EAAMU,OAAQ,SACnH,OACE,yBAAKjB,UAAU,IACb,yBAAKA,UAAU,cAAckB,IAAI,eAAeC,IAAKL,MCqF5CM,MApFf,WAAgB,IAAD,EAEkBC,mBAAS,IAF3B,mBAENC,EAFM,KAEIC,EAFJ,OAGmBF,oBAAS,GAH5B,mBAGNG,EAHM,KAGIC,EAHJ,OAIWJ,mBAAS,IAJpB,mBAINK,EAJM,KAICC,EAJD,OAKqBN,mBAAS,IAL9B,mBAKNO,EALM,KAKKC,EALL,OAM6BR,mBAAS,UANtC,mBAMNS,EANM,KAMSC,EANT,KAsCb,OA9BAC,qBAAU,WACRC,MAAM,mHAAuHH,EAAc,gFAAgF,CAACI,OAAO,QAClOC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACHb,GAAY,GACZF,EAAYe,EAAKC,OAAOC,UACvB,SAACd,GACED,GAAY,GACZE,EAASD,QAGd,CAACI,IAmBFJ,EACQ,uCAAaA,EAAMe,SACjBjB,EAIJ,yBAAKxB,UAAU,MACb,yBAAKA,UAAU,MACT,kBAAC,EAAD,MACA,yBAAKA,UAAU,cACb,2BACEA,UAAU,8CACV0C,SA5BtB,SAAsBC,GACpB,IAAMC,EAAMD,EAAME,OAAOC,MACzBjB,EAAae,IA2BOG,KAAK,OACLC,YAAY,YACZF,MAAOlB,EACPqB,UAvBtB,SAAqBN,GACE,KAAhBA,EAAMO,SACPnB,EAAiBH,MAwBH,4BACE5B,UAAU,+DACVmD,QAhCtB,WACEpB,EAAiBH,KA6BC,WAKF,kBAAC,EAAD,KACCN,EAAS8B,KAAI,SAACC,EAAKC,GAChB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLE,OAAQF,EACRlD,GAAIiD,EAAIjD,GACRW,KAAMsC,EAAItC,KACVC,OAAQqC,EAAIrC,OACZC,OAAQoC,EAAIpC,aAKpB,kBAAC,EAAD,QAnCP,4CCvCOwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9C,GACL+C,QAAQ/C,MAAMA,EAAMe,c","file":"static/js/main.e8365113.chunk.js","sourcesContent":["//jshint esversion:6\r\n\r\nimport React from \"react\";\r\n\r\nfunction Header () {\r\n    return (\r\n        <div className=\"header-title pa3 pa3-ns\">\r\n            <h1 className=\"f1-m f-headline-1\">\r\n            <span role=\"img\" aria-label=\"camera\">ðŸ“·</span> Photo Search <span aria-label=\"camera-flash\" role=\"img\">ðŸ“¸</span></h1>\r\n            <p className=\"fw1 f3\">Search below, see what you can find...</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Header;","//jshint esversion:6\r\n\r\nimport React from \"react\"\r\n\r\nfunction Footer() {\r\n    return(\r\n        <footer className=\"footer\" id=\"footer-contact\">\r\n\r\n        <div className=\"links\">\r\n          \r\n            <a href=\"https://twitter.com/vince_webdev\"><i className=\"footer-icon fab fa-twitter\"></i></a>\r\n            \r\n            <a href=\"https://www.linkedin.com/in/vince-caldwell/\"><i className=\"footer-icon fab fa-linkedin\"></i></a>\r\n            \r\n            <a href=\"https://github.com/vincecaldwell\"><i className=\"footer-icon fab fa-github\"></i></a> \r\n    \r\n          <p>Created by: Vince Caldwell</p>\r\n    \r\n        </div>\r\n    </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","//jshint esversion:6\r\nimport React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div className=\"scroll-field\"style={ {overflowY: 'scroll', border: '2px solid #0984e3', height: '600px' } }>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","//jshint esversion:6\r\n\r\nimport React from 'react';\r\n\r\nconst PhotoCard = (props) => {\r\n\r\n  const srcPath= \"https://farm\"+ props.farm + \".staticflickr.com/\"+ props.server + \"/\"+ props.id +\"_\"+ props.secret +\"_c.jpg\";\r\n  return(\r\n    <div className=\"\">\r\n      <img className=\"mw-100 grow\" alt=\"Did not show\" src={srcPath}></img>\r\n      {/* <p>{props.number}</p> */}\r\n    </div>           \r\n  );\r\n}\r\n\r\nexport default PhotoCard;\r\n\r\n//tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\r\n// const Card = ({name, email, id }) => {","//jshint esversion:6\nimport React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Header from \"../components/Header.js\";\n//import SearchBox from '../components/SearchBox.js';\nimport Footer from '../components/Footer';\nimport Scroll from '../components/Scroll';\nimport PhotoCard from '../components/PhotoCard';\n\n\nfunction App() {\n  \n  const [pictures, setPictures] =useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError]=useState(\"\");\n  const [inputText, setInputText] = useState(\"\");\n  const [wordsToSearch, setWordsToSearch] = useState(\"apples\");\n\n  useEffect(() => {\n    fetch(\"https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=\"+process.env.REACT_APP_FLICKR_KEY+\"&tags=\"+wordsToSearch+\"&safe_search=1&content_type=1&per_page=25&page=1&format=json&nojsoncallback=1\",{method:\"GET\"})\n    .then(response => response.json())\n    .then((data) => {\n        setIsLoaded(true);\n        setPictures(data.photos.photo);\n      }, (error) => {\n            setIsLoaded(true);\n            setError(error);\n        }\n      );\n    }, [wordsToSearch]);\n\n\n  function handleChange(event){\n    const text= event.target.value;\n    setInputText(text);\n  }\n\n  function submitSearch () {\n    setWordsToSearch(inputText);\n  }\n\n  function handleEnter(event) {\n      if(event.keyCode===13){\n        setWordsToSearch(inputText);\n      }\n  }\n\n  \n  if (error) {\n      return (<div>Error: {error.message}</div>);\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n        return(\n            <div className=\"tc\">\n              <div className=\"f2\">\n                    <Header />\n                    <div className=\"search-bar\">\n                      <input\n                        className=\"input-reset ba b--black-20 pa3 mb2 db w-100\" \n                        onChange={handleChange}\n                        type=\"text\" \n                        placeholder=\"Type here\"\n                        value={inputText}\n                        onKeyDown={handleEnter}\n                      >\n                      </input>\n                      <button\n                        className=\"f4 link dim br-pill ph3 pv2 mb2 dib white bg-near-black grab\" \n                        onClick={submitSearch}>Search\n                      </button>\n                    </div>\n                    <Scroll>\n                    {pictures.map((pic, index) => {\n                        return(\n                          <PhotoCard \n                            key={index}\n                            number={index}\n                            id={pic.id}\n                            farm={pic.farm}\n                            server={pic.server}\n                            secret={pic.secret}\n                          />\n                        )})}\n                    </Scroll>\n                    \n                    <Footer />\n              </div>\n            </div>\n          );\n      }\n}\n\n\nexport default App;\n\n// onKeyUp={() => Delay(function() {\n//   useEffect();\n// },1000)}\n\n// const [error, setError] = useState(null);\n//   const [isLoaded, setIsLoaded] = useState(false);\n//   const [items, setItems] = useState([\n//     {\n//     setup : \"\",\n//     delivery : \"\",\n//     id: 0\n//   }]);\n    \n//   // Note: the empty deps array [] means\n//   // this useEffect will run once\n//   // similar to componentDidMount()\n//   useEffect(() => {\n//     fetch(\"https://sv443.net/jokeapi/v2/joke/Programming?type=twopart\")\n//       .then(response => response.json())\n//       .then((data) => {\n//           setIsLoaded(true);\n//           setItems(data);\n//         },\n//         // Note: it's important to handle errors here\n//         // instead of a catch() block so that we don't swallow\n//         // exceptions from actual bugs in components.\n//         (error) => {\n//           setIsLoaded(true);\n//           setError(error);\n//         }\n//       );\n//   }, []);\n\n// if (error) {\n//   return (<div>Error: {error.message}</div>);\n// } else if (!isLoaded) {\n//   return <div>Loading...</div>;\n// } else {\n//   return (\n//   <div className=\"tc\">\n//     <div className=\"f2\">\n//       <Header />\n//       <SearchBox />\n//       <Scroll>\n//         <PhotoCard joke={items.setup} haha={items.delivery} id={items.id=\"25\"}/>\n//         <PhotoCard joke={items.setup} haha={items.delivery} id={items.id=\"15\"}/>\n//         <PhotoCard joke={items.setup} haha={items.delivery} id={items.id=\"80\"}/>\n//       </Scroll>\n//       <Footer />\n//     </div>\n//   </div>\n//   );\n// }\n\n\n\n  // const Delay = (function() {\n  //   var timer =0;\n  //   return function(callback, ms){\n  //     clearTimeout(timer);\n  //     timer =setTimeout(callback,ms);\n  //   };\n  // })()","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//jshint esversion:6\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}